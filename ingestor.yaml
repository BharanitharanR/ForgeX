openapi: 3.0.0
info:
  title: Ingestor Service
  description: API for processing graph-based input to generate microservices and REST endpoints.
  version: 1.0.0
servers:
  - url: http://localhost:8081
    description: Local development server
paths:
  /graph/process:
    post:
      summary: Process a graph input
      description: Accepts a graph-based input (nodes and edges) and generates microservices, REST endpoints, and OpenAPI specs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GraphInput'
      responses:
        '200':
          description: Graph processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Graph processed successfully"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid graph input"
  /HikeList/user/{userID}:
    post:
      summary: Get the details of the specific user
      operationId: addUser
      parameters:
        - name: userID
          in: path
          required: true
          description: The userID for which the RTPHIkers details are needed
          schema:
            type: string

      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RTPHikers'
        "400":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get the details of the specific user
      operationId: getUser
      parameters:
        - name: userID
          in: path
          required: true
          description: The userID for which the RTPHIkers details are needed
          schema:
            type: string

      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RTPHikers'
        "400":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    GraphInput:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/Edge'
    Node:
      type: object
      properties:
        type:
          type: string
          enum: [ ENTITY, RULE, EVENT ]
          example: "entity"
        name:
          type: string
          example: "Employee"
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
    Edge:
      type: object
      properties:
        source:
          type: string
          example: "Employee"
        target:
          type: string
          example: "Department"
        relationship:
          type: string
          example: "belongsTo"
    Field:
      type: object
      properties:
        name:
          type: string
          example: "employeeId"
        type:
          type: string
          example: "string"
        required:
          type: boolean
          example: true
    Condition:
      type: object
      properties:
        field:
          type: string
          example: "department"
        operator:
          type: string
          example: "in"
        value:
          type: object
          example: ["HR", "Finance", "Engineering"]
    Action:
      type: object
      properties:
        type:
          type: string
          example: "error"
        message:
          type: string
          example: "Invalid department"

    RTPHikers:
      type: "object"
      properties:
        userID:
          type: string
        name:
          type: string

    Error:
      type: "object"
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    serviceCollection:
      type: "object"
      properties:
        userId:
          type: string
        name:
          type: string
        lastModifiedTimeStamp:
          type: object
          $ref: '#/components/schemas/MongoDate'

    MongoDate:
      type: "object"
      properties:
        $date:
          type: string
          format: time